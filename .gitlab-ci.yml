image: php:7.2

stages:
    - build
    - deploy

build:
    stage: build
    before_script:
        # Prepare system
        - apt-get update -yqq --quiet && apt-get upgrade -yqq --quiet && apt-get install php7.2 git wget zip -yqq --quiet
        # Install composer
        - wget https://composer.github.io/installer.sig -O - -q | tr -d '\n' > installer.sig
        - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        - php -r "if (hash_file('SHA384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
        - php composer-setup.php
        - php -r "unlink('composer-setup.php'); unlink('installer.sig');"
        - php composer.phar config --global process-timeout 0
        # Setup git
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git config --global user.name "ci run"
    script:
        # create working build
        - mkdir build build_zip
        - cp -rv `ls -A | grep -vE "build|build_zip|.git|tools|docker-compose.yaml|docker-compose.yaml.dist"` build > /dev/null 2>&1
        - cd build
        - ls -la
        - php composer.phar install -o --quiet
        # create artifact
        - cd ..
        - zip -r build_zip/deploy.zip build/* -x tools composer.phar > /dev/null 2>&1
    artifacts:
        paths:
            - build
            - build_zip
        expire_in: 2 days
        when: always
    only:
        - master

deploy:
    stage: deploy
    dependencies:
        - build
    before_script:
        - apt-get update -yqq && apt-get upgrade -yqq && apt-get install sshpass -yqq
    script:
        # upload artifact
        - sshpass -V
        - export SSHPASS=$SERVER_PASS
        - sshpass -p "$SERVER_PASS" scp -P $SERVER_PORT -o 'StrictHostKeyChecking no' -r build_zip/deploy.zip $SERVER_LOGIN@$SERVER_HOST:$SERVER_DIRECTORY/deploy.zip
        - sshpass -p "$SERVER_PASS" ssh -p $SERVER_PORT -o 'StrictHostKeyChecking no' $SERVER_LOGIN@$SERVER_HOST "cd $SERVER_DIRECTORY
            && rm -rf build
            && unzip -o deploy.zip -d . > /dev/null 2>&1
            && rm -f ./build/.env ./build/composer.phar
            && cp -Rf ./build/* ./
            && rm -rf deploy.zip build var/cache/*"
    only:
        - master